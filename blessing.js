// ==UserScript==
// @name         HoatHinh3D Ti√™n duy√™n
// @namespace    http://tampermonkey.net/
// @version      2.5
// @description  M·ªói 2 gi√¢y, script s·∫Ω ki·ªÉm tra trang ƒë·ªÉ t√¨m khung nh·∫≠p l·ªùi ch√∫c ho·∫∑c modal l√¨ x√¨ v√† th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng. T·ª± ƒë·ªông d·ª´ng script khi ph√°t hi·ªán ƒë√£ ch√∫c ph√∫c ho·∫∑c ƒë√£ nh·∫≠n th∆∞·ªüng. KH√îNG T·ª∞ ƒê·ªòNG ƒê√ìNG L√å X√å.
// @author       B·∫°n
// @match        https://hoathinh3d.gg/phong-cuoi*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    console.log('[Auto Blessing] Script t·∫£i th√†nh c√¥ng. Th·ªùi gian hi·ªán t·∫°i:', new Date().toLocaleTimeString());

    // --- C·∫•u h√¨nh ---
    const WEDDING_BLESSING_MESSAGE = "Ch√∫c m·ª´ng h·∫°nh ph√∫c hai b·∫°n! Ch√∫c hai b·∫°n m√£i m√£i b√™n nhau v√† c√≥ m·ªôt cu·ªôc s·ªëng tr√†n ng·∫≠p ni·ªÅm vui v√† ti·∫øng c∆∞·ªùi!";
    const ALREADY_BLESSED_MESSAGE = "ƒê·∫°o h·ªØu ƒë√£ g·ª≠i l·ªùi ch√∫c ph√∫c cho c·∫∑p ƒë√¥i n√†y! üå∏";
    const REWARD_RECEIVED_MESSAGE = "Ch√∫c m·ª´ng ƒë·∫°o h·ªØu ƒë√£ nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng!";

    // Th·ªùi gian ki·ªÉm tra l·∫∑p l·∫°i ch√≠nh
    const MAIN_CHECK_INTERVAL = 2000; // M·ªói 2 gi√¢y

    // Th·ªùi gian ch·ªù c·ªë ƒë·ªãnh gi·ªØa c√°c b∆∞·ªõc thao t√°c (ƒëi·ªÅn text, click n√∫t)
    const INTER_ACTION_DELAY = 1000; // 1 gi√¢y

    // --- Bi·∫øn c·ªù tr·∫°ng th√°i ---
    let isBlessingProcessActive = false; // C·ªù ƒë·ªÉ ƒë·∫£m b·∫£o qu√° tr√¨nh ch√∫c ph√∫c ch·ªâ ch·∫°y m·ªôt l·∫ßn
    let isLixiProcessActive = false;    // C·ªù ƒë·ªÉ ƒë·∫£m b·∫£o qu√° tr√¨nh x·ª≠ l√Ω l√¨ x√¨ ch·ªâ ch·∫°y m·ªôt l·∫ßn
    let intervalId = null;              // ID c·ªßa setInterval ƒë·ªÉ c√≥ th·ªÉ d·ª´ng n√≥
    let isScriptStopping = false;       // C·ªù ƒë·ªÉ tr√°nh ch·∫°y l·∫°i logic d·ª´ng

    // --- H√†m ti·ªán √≠ch: sleep ---
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // --- H√†m ti·ªán √≠ch: safeClick ---
    function safeClick(element, elementName = 'ph·∫ßn t·ª≠') {
        if (!element) {
            console.error(`[Auto Blessing] L·ªñI: Kh√¥ng th·ªÉ click v√¨ ${elementName} l√† null.`);
            return false;
        }
        if (element.disabled) {
            console.warn(`[Auto Blessing] C·∫¢NH B√ÅO: ${elementName} b·ªã disabled, kh√¥ng th·ªÉ click. Ph·∫ßn t·ª≠:`, element);
            return false;
        }
        if (element.offsetParent === null) {
            console.warn(`[Auto Blessing] C·∫¢NH B√ÅO: ${elementName} kh√¥ng hi·ªÉn th·ªã (offsetParent l√† null), kh√¥ng th·ªÉ click. Ph·∫ßn t·ª≠:`, element);
            return false;
        }
        const rect = element.getBoundingClientRect();
        if (rect.width === 0 || rect.height === 0 || rect.x < 0 || rect.y < 0) {
            console.warn(`[Auto Blessing] C·∫¢NH B√ÅO: ${elementName} c√≥ k√≠ch th∆∞·ªõc 0 ho·∫∑c ngo√†i m√†n h√¨nh, kh√¥ng th·ªÉ click. Ph·∫ßn t·ª≠:`, element);
            return false;
        }

        try {
            console.log(`[Auto Blessing] ƒêang th·ª≠ click ${elementName} b·∫±ng dispatchEvent.`);
            const mouseEvent = new MouseEvent('click', {
                view: window,
                bubbles: true,
                cancelable: true
            });
            element.dispatchEvent(mouseEvent);
            console.log(`[Auto Blessing] ƒê√£ dispatch MouseEvent 'click' th√†nh c√¥ng cho ${elementName}.`);
            return true;
        } catch (e) {
            console.warn(`[Auto Blessing] L·ªñI khi dispatch MouseEvent cho ${elementName}:`, e, "Th·ª≠ c√°ch click tr·ª±c ti·∫øp.");
            try {
                element.click();
                console.log(`[Auto Blessing] ƒê√£ click tr·ª±c ti·∫øp ${elementName} th√†nh c√¥ng.`);
                return true;
            } catch (e2) {
                console.error(`[Auto Blessing] L·ªñI KH√îNG TH·ªÇ CLICK ${elementName} (c·∫£ 2 c√°ch):`, e2);
                return false;
            }
        }
    }

    // --- Logic ƒë·ªÉ m·ªü l√¨ x√¨ ---
    async function handleLixi() {
        if (isLixiProcessActive) {
            console.log('[Auto Blessing] handleLixi: Ti·∫øn tr√¨nh x·ª≠ l√Ω l√¨ x√¨ ƒë√£ ho·∫∑c ƒëang ch·∫°y. B·ªè qua.');
            return;
        }
        isLixiProcessActive = true;
        console.log('[Auto Blessing] handleLixi: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω l√¨ x√¨.');

        // T√¨m n√∫t m·ªü l√¨ x√¨
        const openButton = document.querySelector('#openButton');

        if (openButton && openButton.offsetParent !== null && !openButton.disabled) {
            console.log('[Auto Blessing] handleLixi: ƒê√£ t√¨m th·∫•y n√∫t "M·ªü L√¨ X√¨". ƒêang nh·∫•p...');
            if (safeClick(openButton, 'n√∫t "M·ªü L√¨ X√¨"')) {
                console.log('[Auto Blessing] handleLixi: ƒê√É NH·∫§P N√öT "M·ªü L√¨ X√¨" TH√ÄNH C√îNG! S·∫Ω kh√¥ng t·ª± ƒë·ªông ƒë√≥ng l√¨ x√¨.');
                await sleep(INTER_ACTION_DELAY); // ƒê·ª£i 1 gi√¢y sau khi m·ªü
            } else {
                console.warn('[Auto Blessing] handleLixi: Kh√¥ng th·ªÉ nh·∫•p n√∫t "M·ªü L√¨ X√¨". C√≥ th·ªÉ n√∫t b·ªã disabled ho·∫∑c kh√¥ng hi·ªÉn th·ªã.');
            }
        } else {
            console.log('[Auto Blessing] handleLixi: N√∫t "M·ªü L√¨ X√¨" ch∆∞a s·∫µn s√†ng ho·∫∑c kh√¥ng hi·ªÉn th·ªã.');
        }
        isLixiProcessActive = false; // ƒê√°nh d·∫•u l√† ƒë√£ x·ª≠ l√Ω xong (d√π th√†nh c√¥ng hay kh√¥ng)
        console.log('[Auto Blessing] handleLixi: K·∫øt th√∫c x·ª≠ l√Ω l√¨ x√¨.');
    }

    // --- Logic ƒë·ªÉ ch√∫c ph√∫c ---
    async function performBlessing() {
        if (isBlessingProcessActive) {
            console.log('[Auto Blessing] performBlessing: Ti·∫øn tr√¨nh ch√∫c ph√∫c ƒë√£ ho·∫∑c ƒëang ch·∫°y. B·ªè qua.');
            return;
        }
        isBlessingProcessActive = true;
        console.log('[Auto Blessing] performBlessing: B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch√∫c ph√∫c.');

        const textarea = document.querySelector('textarea.blessing-input#blessing-message');
        if (!textarea || textarea.offsetParent === null || textarea.disabled) {
            console.warn('[Auto Blessing] performBlessing: Textarea l·ªùi ch√∫c ch∆∞a s·∫µn s√†ng. D·ª´ng qu√° tr√¨nh ch√∫c ph√∫c.');
            isBlessingProcessActive = false;
            return;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√£ t√¨m th·∫•y textarea l·ªùi ch√∫c. ƒêang ƒëi·ªÅn l·ªùi ch√∫c...');
        textarea.value = WEDDING_BLESSING_MESSAGE;
        textarea.dispatchEvent(new Event('input', { bubbles: true }));
        textarea.dispatchEvent(new Event('change', { bubbles: true }));
        console.log('[Auto Blessing] performBlessing: ƒê√£ ƒëi·ªÅn l·ªùi ch√∫c v√† k√≠ch ho·∫°t s·ª± ki·ªán.');

        await sleep(INTER_ACTION_DELAY);

        const sendButton = document.querySelector('button.blessing-button');
        if (!sendButton || sendButton.offsetParent === null || sendButton.disabled) {
            console.warn('[Auto Blessing] performBlessing: N√∫t "G·ª≠i Ch√∫c Ph√∫c" ch∆∞a s·∫µn s√†ng. D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√£ t√¨m th·∫•y n√∫t "G·ª≠i Ch√∫c Ph√∫c".');
        if (!safeClick(sendButton, 'n√∫t "G·ª≠i Ch√∫c Ph√∫c"')) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG th·ªÉ nh·∫•p n√∫t "G·ª≠i Ch√∫c Ph√∫c". D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√É NH·∫§P N√öT "G·ª≠i Ch√∫c Ph√∫c" TH√ÄNH C√îNG!');

        await sleep(INTER_ACTION_DELAY);

        const confirmButton = document.querySelector('button.custom-modal-button.confirm');
        if (!confirmButton || confirmButton.offsetParent === null || confirmButton.disabled) {
            console.warn('[Auto Blessing] performBlessing: N√∫t "X√°c Nh·∫≠n" ch∆∞a s·∫µn s√†ng. D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√£ t√¨m th·∫•y n√∫t "X√°c Nh·∫≠n".');
        if (!safeClick(confirmButton, 'n√∫t "X√°c Nh·∫≠n"')) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG th·ªÉ nh·∫•p n√∫t "X√°c Nh·∫≠n". D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√É NH·∫§P N√öT "X√°c Nh·∫≠n" TH√ÄNH C√îNG! Qu√° tr√¨nh ch√∫c ph√∫c ho√†n t·∫•t.');
        isBlessingProcessActive = false; // ƒê√°nh d·∫•u l√† ƒë√£ x·ª≠ l√Ω xong
    }

    // --- H√†m d·ª´ng script ---
    function stopAutoBlessing() {
        if (isScriptStopping) {
            console.log('[Auto Blessing] Script ƒëang trong qu√° tr√¨nh d·ª´ng. B·ªè qua.');
            return;
        }
        isScriptStopping = true;
        if (intervalId !== null) {
            clearInterval(intervalId);
            intervalId = null;
            console.log('%c[Auto Blessing] SCRIPT ƒê√É D·ª™NG: ƒê√£ ho√†n th√†nh nhi·ªám v·ª• ho·∫∑c ƒë∆∞·ª£c d·ª´ng th·ªß c√¥ng.', 'color: #1a73e8; font-weight: bold;');
        } else {
            console.log('[Auto Blessing] Script kh√¥ng ho·∫°t ƒë·ªông (intervalId l√† null).');
        }
    }

    // --- H√†m ki·ªÉm tra ch√≠nh l·∫∑p l·∫°i ---
    async function mainLoopCheck() {
        if (isScriptStopping) { // Ki·ªÉm tra c·ªù d·ª´ng ngay t·ª´ ƒë·∫ßu v√≤ng l·∫∑p
            // console.log('[Auto Blessing] Main loop check: Script ƒëang d·ª´ng. B·ªè qua l·∫ßn ki·ªÉm tra n√†y.'); // B·ªè comment n·∫øu mu·ªën log n√†y
            return;
        }
        console.log(`[Auto Blessing] Main loop check: ${new Date().toLocaleTimeString()} - isBlessingProcessActive: ${isBlessingProcessActive}, isLixiProcessActive: ${isLixiProcessActive}`);

        const blessingMessageDiv = document.querySelector('.blessing-message p'); // Gi·∫£ ƒë·ªãnh l√† c√πng selector v·ªõi l·ªùi ch√∫c

        // **KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN D·ª™NG SCRIPT ƒê·∫¶U TI√äN (ƒê√£ nh·∫≠n th∆∞·ªüng)**
        if (blessingMessageDiv && blessingMessageDiv.textContent.includes(REWARD_RECEIVED_MESSAGE)) {
            console.log(`%c[Auto Blessing] ƒê√É PH√ÅT HI·ªÜN D√íNG CH·ªÆ: "${REWARD_RECEIVED_MESSAGE}". D·ª´ng script.`, 'color: green; font-weight: bold;');
            stopAutoBlessing();
            return; // D·ª´ng ngay l·∫≠p t·ª©c
        }

        // **KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN D·ª™NG SCRIPT TH·ª® HAI (ƒê√£ ch√∫c ph√∫c)**
        let alreadyBlessed = false;
        if (blessingMessageDiv && blessingMessageDiv.textContent.includes(ALREADY_BLESSED_MESSAGE)) {
            alreadyBlessed = true;
            console.log(`%c[Auto Blessing] ƒê√É PH√ÅT HI·ªÜN D√íNG CH·ªÆ: "${ALREADY_BLESSED_MESSAGE}". D·ª´ng script.`, 'color: orange; font-weight: bold;');
            stopAutoBlessing();
            return; // D·ª´ng ngay l·∫≠p t·ª©c
        }

        // N·∫øu ƒë√£ ch√∫c ph√∫c nh∆∞ng ch∆∞a d·ª´ng (v√≠ d·ª•: c·ªù isScriptStopping ch∆∞a k·ªãp c·∫≠p nh·∫≠t)
        // th√¨ kh√¥ng c·∫ßn th·ª±c hi·ªán c√°c b∆∞·ªõc ti·∫øp theo
        if (alreadyBlessed) {
            console.log('[Auto Blessing] Tr·∫°ng th√°i: ƒê√£ ch√∫c ph√∫c. Kh√¥ng c·∫ßn th·ª±c hi·ªán th√™m h√†nh ƒë·ªông ch√∫c ph√∫c.');
            // V·∫´n ti·∫øp t·ª•c ki·ªÉm tra l√¨ x√¨ n·∫øu l√¨ x√¨ c√≥ th·ªÉ xu·∫•t hi·ªán sau khi ch√∫c ph√∫c
            // N·∫øu b·∫°n mu·ªën d·ª´ng ho√†n to√†n script ngay sau khi ch√∫c ph√∫c xong,
            // th√¨ h√£y di chuy·ªÉn stopAutoBlessing() l√™n ƒë√¢y.
        }


        // B∆∞·ªõc 2: X·ª≠ l√Ω l√¨ x√¨ n·∫øu c√≥ v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
        const lixiModal = document.querySelector('#liXiModal.active');
        if (lixiModal && lixiModal.offsetParent !== null && !isLixiProcessActive) {
            console.log('[Auto Blessing] Ph√°t hi·ªán modal l√¨ x√¨ ƒëang ho·∫°t ƒë·ªông. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω l√¨ x√¨.');
            await handleLixi();
        }

        // B∆∞·ªõc 3: Ch√∫c ph√∫c n·∫øu ch∆∞a ch√∫c ph√∫c v√† ch∆∞a c√≥ qu√° tr√¨nh n√†o ƒëang ch·∫°y
        // Ch·ªâ th·ª±c hi·ªán n·∫øu c·∫£ l√¨ x√¨ V√Ä ch√∫c ph√∫c kh√¥ng ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ tr√°nh xung ƒë·ªôt
        // V√† CH·ªà KHI CH∆ØA CH√öC PH√öC
        if (!alreadyBlessed && !isBlessingProcessActive && !isLixiProcessActive) {
            const textarea = document.querySelector('textarea.blessing-input#blessing-message');
            if (textarea && textarea.offsetParent !== null && !textarea.disabled) {
                console.log('[Auto Blessing] Ph√°t hi·ªán khung nh·∫≠p l·ªùi ch√∫c s·∫µn s√†ng. B·∫Øt ƒë·∫ßu ch√∫c ph√∫c.');
                await performBlessing();
            } else {
                console.log('[Auto Blessing] Khung nh·∫≠p l·ªùi ch√∫c ch∆∞a s·∫µn s√†ng.');
            }
        }
    }

    // --- Kh·ªüi t·∫°o v√† ch·∫°y v√≤ng l·∫∑p ch√≠nh ---
    function startMainLoop() {
        if (intervalId === null) {
            console.log('[Auto Blessing] Kh·ªüi ƒë·ªông v√≤ng l·∫∑p ki·ªÉm tra ch√≠nh.');
            // Ch·∫°y l·∫ßn ki·ªÉm tra ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c
            mainLoopCheck();
            // Sau ƒë√≥ thi·∫øt l·∫≠p setInterval ƒë·ªÉ l·∫∑p l·∫°i m·ªói 2 gi√¢y
            intervalId = setInterval(mainLoopCheck, MAIN_CHECK_INTERVAL);
        } else {
            console.log('[Auto Blessing] V√≤ng l·∫∑p ki·ªÉm tra ch√≠nh ƒë√£ ch·∫°y r·ªìi.');
        }
    }

    // --- ƒê·∫£m b·∫£o script kh·ªüi ƒë·ªông m·ªôt c√°ch m·∫°nh m·∫Ω ---
    // G·ªçi startMainLoop() ngay l·∫≠p t·ª©c ƒë·ªÉ kh√¥ng b·ªè l·ª° b·∫•t k·ª≥ th·ªùi ƒëi·ªÉm n√†o.
    startMainLoop();

    // Th√™m l·∫Øng nghe s·ª± ki·ªán DOMContentLoaded v√† load ƒë·ªÉ d·ª± ph√≤ng
    window.addEventListener('DOMContentLoaded', () => {
        console.log('[Auto Blessing] DOMContentLoaded ƒë√£ k√≠ch ho·∫°t. Ki·ªÉm tra l·∫°i kh·ªüi ƒë·ªông v√≤ng l·∫∑p.');
        startMainLoop();
    });

    window.addEventListener('load', () => {
        console.log('[Auto Blessing] window.load ƒë√£ k√≠ch ho·∫°t. Ki·ªÉm tra l·∫°i kh·ªüi ƒë·ªông v√≤ng l·∫∑p.');
        startMainLoop();
    });

    // Xu·∫•t h√†m d·ª´ng script ra global scope ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ console
    window.stopAutoBlessing = stopAutoBlessing;

})();
