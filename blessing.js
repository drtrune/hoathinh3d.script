// ==UserScript==
// @name         HoatHinh3D Ch√∫c ph√∫c & L√¨ X√¨ T·ª± ƒê·ªông (Logic L√¨ X√¨ Sau Ch√∫c Ph√∫c)
// @namespace    http://tampermonkey.net/
// @version      2.6
// @description  M·ªói 2 gi√¢y, script s·∫Ω ki·ªÉm tra trang ƒë·ªÉ t√¨m khung nh·∫≠p l·ªùi ch√∫c ho·∫∑c modal l√¨ x√¨. N·∫øu ƒë√£ ch√∫c ph√∫c, s·∫Ω t·∫≠p trung t√¨m l√¨ x√¨ (5 l·∫ßn). T·ª± ƒë·ªông d·ª´ng script khi ph√°t hi·ªán ƒë√£ nh·∫≠n th∆∞·ªüng. KH√îNG T·ª∞ ƒê·ªòNG ƒê√ìNG L√å X√å.
// @author       B·∫°n
// @match        https://hoathinh3d.gg/phong-cuoi*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    console.log('[Auto Blessing] Script t·∫£i th√†nh c√¥ng. Th·ªùi gian hi·ªán t·∫°i:', new Date().toLocaleTimeString());

    // --- C·∫•u h√¨nh ---
    const WEDDING_BLESSING_MESSAGE = "Ch√∫c m·ª´ng h·∫°nh ph√∫c hai b·∫°n! Ch√∫c hai b·∫°n m√£i m√£i b√™n nhau v√† c√≥ m·ªôt cu·ªôc s·ªëng tr√†n ng·∫≠p ni·ªÅm vui v√† ti·∫øng c∆∞·ªùi!";
    const ALREADY_BLESSED_MESSAGE = "ƒê·∫°o h·ªØu ƒë√£ g·ª≠i l·ªùi ch√∫c ph√∫c cho c·∫∑p ƒë√¥i n√†y! üå∏";
    const REWARD_RECEIVED_MESSAGE = "Ch√∫c m·ª´ng ƒë·∫°o h·ªØu ƒë√£ nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng!";

    // Th·ªùi gian ki·ªÉm tra l·∫∑p l·∫°i ch√≠nh c·ªßa v√≤ng l·∫∑p t·ªïng th·ªÉ
    const MAIN_CHECK_INTERVAL = 2000; // M·ªói 2 gi√¢y

    // C·∫•u h√¨nh th·ªùi gian ch·ªù v√† s·ªë l·∫ßn th·ª≠ cho vi·ªác t√¨m l√¨ x√¨ c·ª• th·ªÉ sau khi ƒë√£ x√°c ƒë·ªãnh tr·∫°ng th√°i ch√∫c ph√∫c
    const LIXI_CHECK_INTERVAL = 2000; // 2 gi√¢y
    const LIXI_CHECK_RETRIES = 5;     // T·ªëi ƒëa 5 l·∫ßn (t·ªïng 10 gi√¢y ch·ªù l√¨ x√¨)

    // Th·ªùi gian ch·ªù c·ªë ƒë·ªãnh gi·ªØa c√°c b∆∞·ªõc thao t√°c (ƒëi·ªÅn text, click n√∫t)
    const INTER_ACTION_DELAY = 1000; // 1 gi√¢y

    // --- Bi·∫øn c·ªù tr·∫°ng th√°i ---
    let isBlessingProcessActive = false; // C·ªù ƒë·ªÉ ƒë·∫£m b·∫£o qu√° tr√¨nh ch√∫c ph√∫c ch·ªâ ch·∫°y m·ªôt l·∫ßn
    let isLixiProcessActive = false;    // C·ªù ƒë·ªÉ ƒë·∫£m b·∫£o qu√° tr√¨nh x·ª≠ l√Ω l√¨ x√¨ ch·ªâ ch·∫°y m·ªôt l·∫ßn
    let intervalId = null;              // ID c·ªßa setInterval ƒë·ªÉ c√≥ th·ªÉ d·ª´ng n√≥
    let isScriptStopping = false;       // C·ªù ƒë·ªÉ tr√°nh ch·∫°y l·∫°i logic d·ª´ng
    let hasAttemptedLixiAfterBlessing = false; // C·ªù ƒë·ªÉ ch·ªâ c·ªë g·∫Øng t√¨m l√¨ x√¨ 5 l·∫ßn sau khi ch√∫c ph√∫c xong ho·∫∑c ƒë√£ x√°c ƒë·ªãnh ƒë√£ ch√∫c ph√∫c

    // --- H√†m ti·ªán √≠ch: sleep ---
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // --- H√†m ti·ªán √≠ch: safeClick ---
    function safeClick(element, elementName = 'ph·∫ßn t·ª≠') {
        if (!element) {
            console.error(`[Auto Blessing] L·ªñI: Kh√¥ng th·ªÉ click v√¨ ${elementName} l√† null.`);
            return false;
        }
        if (element.disabled) {
            console.warn(`[Auto Blessing] C·∫¢NH B√ÅO: ${elementName} b·ªã disabled, kh√¥ng th·ªÉ click. Ph·∫ßn t·ª≠:`, element);
            return false;
        }
        if (element.offsetParent === null) {
            console.warn(`[Auto Blessing] C·∫¢NH B√ÅO: ${elementName} kh√¥ng hi·ªÉn th·ªã (offsetParent l√† null), kh√¥ng th·ªÉ click. Ph·∫ßn t·ª≠:`, element);
            return false;
        }
        const rect = element.getBoundingClientRect();
        if (rect.width === 0 || rect.height === 0 || rect.x < 0 || rect.y < 0) {
            console.warn(`[Auto Blessing] C·∫¢NH B√ÅO: ${elementName} c√≥ k√≠ch th∆∞·ªõc 0 ho·∫∑c ngo√†i m√†n h√¨nh, kh√¥ng th·ªÉ click. Ph·∫ßn t·ª≠:`, element);
            return false;
        }

        try {
            console.log(`[Auto Blessing] ƒêang th·ª≠ click ${elementName} b·∫±ng dispatchEvent.`);
            const mouseEvent = new MouseEvent('click', {
                view: window,
                bubbles: true,
                cancelable: true
            });
            element.dispatchEvent(mouseEvent);
            console.log(`[Auto Blessing] ƒê√£ dispatch MouseEvent 'click' th√†nh c√¥ng cho ${elementName}.`);
            return true;
        } catch (e) {
            console.warn(`[Auto Blessing] L·ªñI khi dispatch MouseEvent cho ${elementName}:`, e, "Th·ª≠ c√°ch click tr·ª±c ti·∫øp.");
            try {
                element.click();
                console.log(`[Auto Blessing] ƒê√£ click tr·ª±c ti·∫øp ${elementName} th√†nh c√¥ng.`);
                return true;
            } catch (e2) {
                console.error(`[Auto Blessing] L·ªñI KH√îNG TH·ªÇ CLICK ${elementName} (c·∫£ 2 c√°ch):`, e2);
                return false;
            }
        }
    }

    // --- H√†m ti·ªán √≠ch: waitForElementSimple (ƒë∆°n gi·∫£n, ch·ªâ ch·ªù m√† kh√¥ng retry, d√πng n·ªôi b·ªô) ---
    async function waitForElementSimple(selector, timeout = 5000, interval = 200, elementName = selector) {
        let startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            const element = document.querySelector(selector);
            if (element && element.offsetParent !== null && (!element.disabled || typeof element.disabled === 'undefined')) {
                return element;
            }
            await sleep(interval);
        }
        return null;
    }

    // --- Logic ƒë·ªÉ m·ªü l√¨ x√¨ (v·ªõi s·ªë l·∫ßn th·ª≠ gi·ªõi h·∫°n) ---
    async function handleLixiWithRetries() {
        if (isLixiProcessActive) {
            console.log('[Auto Blessing] handleLixiWithRetries: Ti·∫øn tr√¨nh x·ª≠ l√Ω l√¨ x√¨ ƒë√£ ho·∫∑c ƒëang ch·∫°y. B·ªè qua.');
            return false; // Tr√°nh ch·∫°y l·∫°i
        }
        isLixiProcessActive = true;
        console.log(`[Auto Blessing] handleLixiWithRetries: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω l√¨ x√¨ (th·ª≠ ${LIXI_CHECK_RETRIES} l·∫ßn, m·ªói ${LIXI_CHECK_INTERVAL/1000}s).`);

        let lixiFoundAndOpened = false;
        for (let i = 0; i < LIXI_CHECK_RETRIES; i++) {
            const lixiModal = document.querySelector('#liXiModal.active');
            if (lixiModal && lixiModal.offsetParent !== null) {
                console.log(`[Auto Blessing] handleLixiWithRetries: ƒê√£ t√¨m th·∫•y modal l√¨ x√¨ (l·∫ßn ${i+1}/${LIXI_CHECK_RETRIES})!`);
                const openButton = await waitForElementSimple('#openButton', INTER_ACTION_DELAY * 2, 200, 'n√∫t "M·ªü L√¨ X√¨"'); // Ch·ªù n√∫t m·ªü 2s
                if (openButton) {
                    console.log('[Auto Blessing] handleLixiWithRetries: ƒê√£ t√¨m th·∫•y n√∫t "M·ªü L√¨ X√¨". ƒêang nh·∫•p...');
                    if (safeClick(openButton, 'n√∫t "M·ªü L√¨ X√¨"')) {
                        console.log('[Auto Blessing] handleLixiWithRetries: ƒê√É NH·∫§P N√öT "M·ªü L√¨ X√¨" TH√ÄNH C√îNG! S·∫Ω kh√¥ng t·ª± ƒë·ªông ƒë√≥ng l√¨ x√¨.');
                        await sleep(INTER_ACTION_DELAY); // ƒê·ª£i 1 gi√¢y sau khi m·ªü
                        lixiFoundAndOpened = true;
                        break; // ƒê√£ m·ªü l√¨ x√¨, d·ª´ng v√≤ng l·∫∑p th·ª≠
                    } else {
                        console.warn('[Auto Blessing] handleLixiWithRetries: Kh√¥ng th·ªÉ nh·∫•p n√∫t "M·ªü L√¨ X√¨". Th·ª≠ l·∫°i.');
                    }
                } else {
                    console.warn('[Auto Blessing] handleLixiWithRetries: KH√îNG t√¨m th·∫•y n√∫t "M·ªü L√¨ X√¨" trong modal. Th·ª≠ l·∫°i.');
                }
            } else {
                console.log(`[Auto Blessing] handleLixiWithRetries: L·∫ßn th·ª≠ ${i+1}/${LIXI_CHECK_RETRIES}: Modal l√¨ x√¨ ch∆∞a s·∫µn s√†ng.`);
            }
            if (!lixiFoundAndOpened && i < LIXI_CHECK_RETRIES - 1) { // Ch·ªâ ƒë·ª£i n·∫øu ch∆∞a m·ªü ƒë∆∞·ª£c v√† v·∫´n c√≤n l·∫ßn th·ª≠
                await sleep(LIXI_CHECK_INTERVAL);
            }
        }
        isLixiProcessActive = false;
        console.log(`[Auto Blessing] handleLixiWithRetries: K·∫øt th√∫c x·ª≠ l√Ω l√¨ x√¨. L√¨ x√¨ ƒë√£ m·ªü: ${lixiFoundAndOpened}`);
        return lixiFoundAndOpened;
    }

    // --- Logic ƒë·ªÉ ch√∫c ph√∫c ---
    async function performBlessing() {
        if (isBlessingProcessActive) {
            console.log('[Auto Blessing] performBlessing: Ti·∫øn tr√¨nh ch√∫c ph√∫c ƒë√£ ho·∫∑c ƒëang ch·∫°y. B·ªè qua.');
            return false; // Tr√°nh ch·∫°y l·∫°i
        }
        isBlessingProcessActive = true;
        console.log('[Auto Blessing] performBlessing: B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch√∫c ph√∫c.');

        const textarea = await waitForElementSimple('textarea.blessing-input#blessing-message', INTER_ACTION_DELAY * 3, 200, 'textarea l·ªùi ch√∫c'); // Ch·ªù 3s
        if (!textarea) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG t√¨m th·∫•y textarea l·ªùi ch√∫c sau khi ch·ªù. D·ª´ng qu√° tr√¨nh ch√∫c ph√∫c.');
            isBlessingProcessActive = false;
            return false;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√£ t√¨m th·∫•y textarea l·ªùi ch√∫c. ƒêang ƒëi·ªÅn l·ªùi ch√∫c...');
        textarea.value = WEDDING_BLESSING_MESSAGE;
        textarea.dispatchEvent(new Event('input', { bubbles: true }));
        textarea.dispatchEvent(new Event('change', { bubbles: true }));
        console.log('[Auto Blessing] performBlessing: ƒê√£ ƒëi·ªÅn l·ªùi ch√∫c v√† k√≠ch ho·∫°t s·ª± ki·ªán.');

        await sleep(INTER_ACTION_DELAY);

        const sendButton = await waitForElementSimple('button.blessing-button', INTER_ACTION_DELAY * 3, 200, 'n√∫t "G·ª≠i Ch√∫c Ph√∫c"'); // Ch·ªù 3s
        if (!sendButton) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG t√¨m th·∫•y n√∫t "G·ª≠i Ch√∫c Ph√∫c" sau khi ch·ªù. D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return false;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√£ t√¨m th·∫•y n√∫t "G·ª≠i Ch√∫c Ph√∫c".');
        if (!safeClick(sendButton, 'n√∫t "G·ª≠i Ch√∫c Ph√∫c"')) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG th·ªÉ nh·∫•p n√∫t "G·ª≠i Ch√∫c Ph√∫c". D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return false;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√É NH·∫§P N√öT "G·ª≠i Ch√∫c Ph√∫c" TH√ÄNH C√îNG!');

        await sleep(INTER_ACTION_DELAY);

        const confirmButton = await waitForElementSimple('button.custom-modal-button.confirm', INTER_ACTION_DELAY * 3, 200, 'n√∫t "X√°c Nh·∫≠n"'); // Ch·ªù 3s
        if (!confirmButton) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG t√¨m th·∫•y n√∫t "X√°c Nh·∫≠n" sau khi ch·ªù. D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return false;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√£ t√¨m th·∫•y n√∫t "X√°c Nh·∫≠n".');
        if (!safeClick(confirmButton, 'n√∫t "X√°c Nh·∫≠n"')) {
            console.warn('[Auto Blessing] performBlessing: KH√îNG th·ªÉ nh·∫•p n√∫t "X√°c Nh·∫≠n". D·ª´ng qu√° tr√¨nh.');
            isBlessingProcessActive = false;
            return false;
        }
        console.log('[Auto Blessing] performBlessing: ƒê√É NH·∫§P N√öT "X√°c Nh·∫≠n" TH√ÄNH C√îNG! Qu√° tr√¨nh ch√∫c ph√∫c ho√†n t·∫•t.');
        isBlessingProcessActive = false; // ƒê√°nh d·∫•u l√† ƒë√£ x·ª≠ l√Ω xong
        return true;
    }

    // --- H√†m d·ª´ng script ---
    function stopAutoBlessing() {
        if (isScriptStopping) {
            console.log('[Auto Blessing] Script ƒëang trong qu√° tr√¨nh d·ª´ng. B·ªè qua.');
            return;
        }
        isScriptStopping = true;
        if (intervalId !== null) {
            clearInterval(intervalId);
            intervalId = null;
            console.log('%c[Auto Blessing] SCRIPT ƒê√É D·ª™NG: ƒê√£ ho√†n th√†nh nhi·ªám v·ª• ho·∫∑c ƒë∆∞·ª£c d·ª´ng th·ªß c√¥ng.', 'color: #1a73e8; font-weight: bold;');
        } else {
            console.log('[Auto Blessing] Script kh√¥ng ho·∫°t ƒë·ªông (intervalId l√† null).');
        }
    }

    // --- H√†m ki·ªÉm tra ch√≠nh l·∫∑p l·∫°i ---
    async function mainLoopCheck() {
        if (isScriptStopping) { // Ki·ªÉm tra c·ªù d·ª´ng ngay t·ª´ ƒë·∫ßu v√≤ng l·∫∑p
            return;
        }
        console.log(`[Auto Blessing] Main loop check: ${new Date().toLocaleTimeString()} - BlessingActive: ${isBlessingProcessActive}, LixiActive: ${isLixiProcessActive}, LixiAttempted: ${hasAttemptedLixiAfterBlessing}`);

        const blessingMessageDiv = document.querySelector('.blessing-message p'); // Gi·∫£ ƒë·ªãnh l√† n∆°i ch·ª©a c·∫£ l·ªùi ch√∫c v√† th√¥ng b√°o nh·∫≠n th∆∞·ªüng

        // **KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN D·ª™NG SCRIPT ƒê·∫¶U TI√äN (ƒê√£ nh·∫≠n th∆∞·ªüng)**
        if (blessingMessageDiv && blessingMessageDiv.textContent.includes(REWARD_RECEIVED_MESSAGE)) {
            console.log(`%c[Auto Blessing] ƒê√É PH√ÅT HI·ªÜN D√íNG CH·ªÆ: "${REWARD_RECEIVED_MESSAGE}". D·ª´ng script.`, 'color: green; font-weight: bold;');
            stopAutoBlessing();
            return; // D·ª´ng ngay l·∫≠p t·ª©c
        }

        // --- X√°c ƒë·ªãnh tr·∫°ng th√°i ƒë√£ ch√∫c ph√∫c ---
        let alreadyBlessed = false;
        if (blessingMessageDiv && blessingMessageDiv.textContent.includes(ALREADY_BLESSED_MESSAGE)) {
            alreadyBlessed = true;
            console.log('[Auto Blessing] Tr·∫°ng th√°i: ƒê√£ ch√∫c ph√∫c.');
        } else {
            console.log('[Auto Blessing] Tr·∫°ng th√°i: Ch∆∞a ch√∫c ph√∫c.');
        }

        // --- Logic ch√≠nh ---
        // 1. N·∫øu ƒë√£ ch√∫c ph√∫c ho·∫∑c qu√° tr√¨nh ch√∫c ph√∫c ƒëang di·ªÖn ra, T·∫¨P TRUNG T√åM L√å X√å
        if (alreadyBlessed) {
            // Ch·ªâ c·ªë g·∫Øng t√¨m l√¨ x√¨ 5 l·∫ßn sau khi ƒë√£ ch√∫c ph√∫c
            if (!hasAttemptedLixiAfterBlessing) {
                console.log('[Auto Blessing] ƒê√£ ch√∫c ph√∫c. B·∫Øt ƒë·∫ßu t√¨m l√¨ x√¨ (t·ªëi ƒëa 5 l·∫ßn).');
                // G·ªçi h√†m handleLixiWithRetries, v√† ƒë√°nh d·∫•u l√† ƒë√£ c·ªë g·∫Øng
                const lixiOpened = await handleLixiWithRetries();
                hasAttemptedLixiAfterBlessing = true; // ƒê√°nh d·∫•u ƒë√£ c·ªë g·∫Øng t√¨m l√¨ x√¨ sau ch√∫c ph√∫c
                if (lixiOpened) {
                    console.log('[Auto Blessing] L√¨ x√¨ ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng sau ch√∫c ph√∫c. V·∫´n ti·∫øp t·ª•c v√≤ng l·∫∑p ƒë·ªÉ ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p kh√°c (v√≠ d·ª•: nh·∫≠n th∆∞·ªüng) ho·∫∑c d·ª´ng th·ªß c√¥ng.');
                    // N·∫øu b·∫°n mu·ªën d·ª´ng script ho√†n to√†n sau khi l√¨ x√¨ ƒë√£ ƒë∆∞·ª£c m·ªü, h√£y g·ªçi stopAutoBlessing() ·ªü ƒë√¢y
                    // stopAutoBlessing();
                } else {
                    console.log('[Auto Blessing] ƒê√£ th·ª≠ t√¨m l√¨ x√¨ 5 l·∫ßn sau ch√∫c ph√∫c nh∆∞ng kh√¥ng m·ªü ƒë∆∞·ª£c. S·∫Ω kh√¥ng th·ª≠ l·∫°i l√¨ x√¨ n·ªØa trong t∆∞∆°ng lai (tr·ª´ khi trang ƒë∆∞·ª£c t·∫£i l·∫°i).');
                }
            } else {
                console.log('[Auto Blessing] ƒê√£ ch√∫c ph√∫c v√† ƒë√£ c·ªë g·∫Øng t√¨m l√¨ x√¨. Ch·ªù ƒë·ª£i n·∫øu c√≥ th√¥ng b√°o nh·∫≠n th∆∞·ªüng.');
            }
        }
        // 2. N·∫øu ch∆∞a ch√∫c ph√∫c V√Ä kh√¥ng c√≥ qu√° tr√¨nh ch√∫c ph√∫c/l√¨ x√¨ n√†o ƒëang ch·∫°y, th√¨ ti·∫øn h√†nh ch√∫c ph√∫c
        else if (!isBlessingProcessActive && !isLixiProcessActive) {
            const textarea = document.querySelector('textarea.blessing-input#blessing-message');
            if (textarea && textarea.offsetParent !== null && !textarea.disabled) {
                console.log('[Auto Blessing] Ph√°t hi·ªán khung nh·∫≠p l·ªùi ch√∫c s·∫µn s√†ng. B·∫Øt ƒë·∫ßu ch√∫c ph√∫c.');
                const blessingSuccess = await performBlessing();
                if (blessingSuccess) {
                    console.log('[Auto Blessing] Ch√∫c ph√∫c th√†nh c√¥ng! B√¢y gi·ªù s·∫Ω t√¨m l√¨ x√¨.');
                    // Sau khi ch√∫c ph√∫c th√†nh c√¥ng, chuy·ªÉn sang tr·∫°ng th√°i ƒë√£ ch√∫c ph√∫c v√† t√¨m l√¨ x√¨
                    hasAttemptedLixiAfterBlessing = false; // Reset c·ªù ƒë·ªÉ t√¨m l√¨ x√¨ 5 l·∫ßn sau khi ch√∫c ph√∫c xong
                    // V√≤ng l·∫∑p ti·∫øp theo s·∫Ω t·ª± ƒë·ªông v√†o nh√°nh alreadyBlessed v√† t√¨m l√¨ x√¨
                } else {
                    console.warn('[Auto Blessing] Ch√∫c ph√∫c kh√¥ng th√†nh c√¥ng. S·∫Ω th·ª≠ l·∫°i ·ªü l·∫ßn ki·ªÉm tra ti·∫øp theo n·∫øu ƒëi·ªÅu ki·ªán cho ph√©p.');
                }
            } else {
                console.log('[Auto Blessing] Khung nh·∫≠p l·ªùi ch√∫c ch∆∞a s·∫µn s√†ng.');
            }
        }
    }

    // --- Kh·ªüi t·∫°o v√† ch·∫°y v√≤ng l·∫∑p ch√≠nh ---
    function startMainLoop() {
        if (intervalId === null) {
            console.log('[Auto Blessing] Kh·ªüi ƒë·ªông v√≤ng l·∫∑p ki·ªÉm tra ch√≠nh.');
            // Ch·∫°y l·∫ßn ki·ªÉm tra ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c
            mainLoopCheck();
            // Sau ƒë√≥ thi·∫øt l·∫≠p setInterval ƒë·ªÉ l·∫∑p l·∫°i m·ªói 2 gi√¢y
            intervalId = setInterval(mainLoopCheck, MAIN_CHECK_INTERVAL);
        } else {
            console.log('[Auto Blessing] V√≤ng l·∫∑p ki·ªÉm tra ch√≠nh ƒë√£ ch·∫°y r·ªìi.');
        }
    }

    // --- ƒê·∫£m b·∫£o script kh·ªüi ƒë·ªông m·ªôt c√°ch m·∫°nh m·∫Ω ---
    // G·ªçi startMainLoop() ngay l·∫≠p t·ª©c ƒë·ªÉ kh√¥ng b·ªè l·ª° b·∫•t k·ª≥ th·ªùi ƒëi·ªÉm n√†o.
    startMainLoop();

    // Th√™m l·∫Øng nghe s·ª± ki·ªán DOMContentLoaded v√† load ƒë·ªÉ d·ª± ph√≤ng
    window.addEventListener('DOMContentLoaded', () => {
        console.log('[Auto Blessing] DOMContentLoaded ƒë√£ k√≠ch ho·∫°t. Ki·ªÉm tra l·∫°i kh·ªüi ƒë·ªông v√≤ng l·∫∑p.');
        startMainLoop();
    });

    window.addEventListener('load', () => {
        console.log('[Auto Blessing] window.load ƒë√£ k√≠ch ho·∫°t. Ki·ªÉm tra l·∫°i kh·ªüi ƒë·ªông v√≤ng l·∫∑p.');
        startMainLoop();
    });

    // Xu·∫•t h√†m d·ª´ng script ra global scope ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ console
    window.stopAutoBlessing = stopAutoBlessing;

})();
