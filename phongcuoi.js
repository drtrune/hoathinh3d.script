// ==UserScript==
// @name         HH3D Ti√™n duy√™n
// @namespace    https://github.com/drtrune/hoathinh3d.script
// @version      3.2
// @description  T·ª± ƒë·ªông ch√∫c ph√∫c, nh·∫≠n l√¨ x√¨
// @author       Dr. Trune
// @match        https://hoathinh3d.mx/phong-cuoi*
// @grant        GM_addStyle
// @run-at       document-start
// ==/UserScript==
(function() {
    'use strict';

    console.log('[HH3D T·ªëi ∆∞u] Script t·∫£i th√†nh c√¥ng. Th·ªùi gian hi·ªán t·∫°i:', new Date().toLocaleTimeString());

    // --- C·∫•u h√¨nh ---
    const WEDDING_BLESSING_MESSAGE = "Ch√∫c m·ª´ng h·∫°nh ph√∫c hai b·∫°n! Ch√∫c hai b·∫°n m√£i m√£i b√™n nhau v√† c√≥ m·ªôt cu·ªôc s·ªëng tr√†n ng·∫≠p ni·ªÅm vui v√† ti·∫øng c∆∞·ªùi!";
    const ALREADY_BLESSED_MESSAGE = "ƒê·∫°o h·ªØu ƒë√£ g·ª≠i l·ªùi ch√∫c ph√∫c cho c·∫∑p ƒë√¥i n√†y! üå∏";
    const REWARD_RECEIVED_MESSAGE = "Ch√∫c m·ª´ng ƒë·∫°o h·ªØu ƒë√£ nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng!";
    const LIXI_MODAL_TEXT = "ƒê·∫°o h·ªØu l√† v·ªã kh√°ch may m·∫Øn nh·∫≠n ƒë∆∞·ª£c l√¨ x√¨ t·ª´ ch·ªß ti·ªác c∆∞·ªõi. H√£y m·ªü ƒë·ªÉ xem ƒëi·ªÅu b·∫•t ng·ªù!";
    const BLESSING_MAX_RETRIES = 5; // S·ªë l·∫ßn th·ª≠ ch√∫c ph√∫c t·ªëi ƒëa
    const LIXI_CHECK_RETRIES = 15; // S·ªë l·∫ßn th·ª≠ t√¨m l√¨ x√¨ t·ªëi ƒëa
    const INTER_ACTION_DELAY_MS = 500; // Th·ªùi gian ch·ªù gi·ªØa c√°c h√†nh ƒë·ªông
    const ELEMENT_WAIT_TIMEOUT_MS = 5000; // Th·ªùi gian ch·ªù t·ªëi ƒëa cho m·ªôt ph·∫ßn t·ª≠
    const RETRY_INTERVAL_MS = 1000; // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i

    // --- Bi·∫øn tr·∫°ng th√°i ---
    let isScriptRunning = false;

    // --- C√°c h√†m ti·ªán √≠ch ---

    /**
     * D·ª´ng script trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh.
     * @param {number} ms - Th·ªùi gian d·ª´ng (mili gi√¢y).
     * @returns {Promise<void>}
     */
    function sleep(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

    /**
     * Th·ª±c hi·ªán click an to√†n tr√™n m·ªôt ph·∫ßn t·ª≠, tr√°nh l·ªói.
     * @param {HTMLElement} element - Ph·∫ßn t·ª≠ c·∫ßn click.
     * @returns {boolean} - Tr·∫£ v·ªÅ true n·∫øu click th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false.
     */
    function safeClick(element) {
        if (!element || element.disabled || element.offsetParent === null) {
            return false;
        }
        try {
            element.dispatchEvent(new MouseEvent('click', { view: window, bubbles: true, cancelable: true }));
            return true;
        } catch (e) {
            console.warn('[HH3D T·ªëi ∆∞u] safeClick dispatchEvent l·ªói, th·ª≠ click() tr·ª±c ti·∫øp:', e);
            try {
                element.click();
                return true;
            } catch (e2) {
                console.error('[HH3D T·ªëi ∆∞u] safeClick th·∫•t b·∫°i ho√†n to√†n:', e2);
                return false;
            }
        }
    }

    /**
     * Ch·ªù m·ªôt ph·∫ßn t·ª≠ xu·∫•t hi·ªán tr√™n trang.
     * @param {string} selector - CSS selector c·ªßa ph·∫ßn t·ª≠.
     * @param {number} timeout - Th·ªùi gian ch·ªù t·ªëi ƒëa (mili gi√¢y).
     * @returns {Promise<HTMLElement|null>} - Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i null.
     */
    async function waitForElement(selector, timeout = ELEMENT_WAIT_TIMEOUT_MS) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            const element = document.querySelector(selector);
            if (element && element.offsetParent !== null) { // Ch·ªâ c·∫ßn ki·ªÉm tra hi·ªÉn th·ªã
                return element;
            }
            await sleep(200);
        }
        return null;
    }

    // --- C√°c h√†m logic ch√≠nh ---

    /**
     * T√¨m v√† m·ªü l√¨ x√¨ v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i.
     * @returns {Promise<boolean>} - True n·∫øu m·ªü l√¨ x√¨ th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false.
     */
    async function tryOpenLixi() {
        console.log(`[HH3D T·ªëi ∆∞u] B·∫Øt ƒë·∫ßu t√¨m l√¨ x√¨, th·ª≠ t·ªëi ƒëa ${LIXI_CHECK_RETRIES} l·∫ßn.`);
        for (let i = 0; i &lt; LIXI_CHECK_RETRIES; i++) {
            // D√πng XPath ƒë·ªÉ t√¨m ch√≠nh x√°c h∆°n
            const lixiMessageP = document.evaluate(`//p[contains(text(), "${LIXI_MODAL_TEXT}")]`, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;

            if (lixiMessageP && lixiMessageP.offsetParent !== null) {
                console.log('[HH3D T·ªëi ∆∞u] ƒê√£ ph√°t hi·ªán modal l√¨ x√¨.');
                const openButton = await waitForElement('#openButton');
                if (openButton && safeClick(openButton)) {
                    console.log('%c[HH3D T·ªëi ∆∞u] ƒê√É M·ªû L√å X√å TH√ÄNH C√îNG!', 'color: #1a73e8; font-weight: bold;');
                    await sleep(INTER_ACTION_DELAY_MS);
                    return true; // M·ªü th√†nh c√¥ng
                }
            }
            console.log(`[HH3D T·ªëi ∆∞u] Ch∆∞a t√¨m th·∫•y l√¨ x√¨, th·ª≠ l·∫°i l·∫ßn ${i + 1}/${LIXI_CHECK_RETRIES}...`);
            await sleep(RETRY_INTERVAL_MS);
        }
        console.log('[HH3D T·ªëi ∆∞u] Kh√¥ng t√¨m th·∫•y l√¨ x√¨ sau s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa.');
        return false;
    }

    /**
     * Th·ª±c hi·ªán g·ª≠i l·ªùi ch√∫c ph√∫c.
     * @returns {Promise<boolean>} - True n·∫øu g·ª≠i th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false.
     */
    async function performBlessing() {
        console.log('[HH3D T·ªëi ∆∞u] ƒêang th·ª±c hi·ªán ch√∫c ph√∫c...');
        const textarea = await waitForElement('textarea.blessing-input#blessing-message');
        if (!textarea) {
            console.error('[HH3D T·ªëi ∆∞u] Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p l·ªùi ch√∫c.');
            return false;
        }

        textarea.value = WEDDING_BLESSING_MESSAGE;
        textarea.dispatchEvent(new Event('input', { bubbles: true }));
        textarea.dispatchEvent(new Event('change', { bubbles: true }));
        await sleep(INTER_ACTION_DELAY_MS);

        const sendButton = await waitForElement('button.blessing-button');
        if (!sendButton || !safeClick(sendButton)) {
            console.error('[HH3D T·ªëi ∆∞u] Kh√¥ng th·ªÉ click n√∫t G·ª≠i l·ªùi ch√∫c.');
            return false;
        }
        await sleep(INTER_ACTION_DELAY_MS);

        const confirmButton = await waitForElement('button.custom-modal-button.confirm');
        if (!confirmButton || !safeClick(confirmButton)) {
            console.error('[HH3D T·ªëi ∆∞u] Kh√¥ng th·ªÉ click n√∫t X√°c nh·∫≠n.');
            return false;
        }

        console.log('%c[HH3D T·ªëi ∆∞u] G·ª≠i l·ªùi ch√∫c ph√∫c th√†nh c√¥ng!', 'color: green; font-weight: bold;');
        return true;
    }

    /**
     * H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn to√†n b·ªô lu·ªìng t·ª± ƒë·ªông.
     */
    async function runAutomation() {
        if (isScriptRunning) return;
        isScriptRunning = true;

        // Di chuy·ªÉn khu v·ª±c ch√∫c ph√∫c l√™n ƒë·∫ßu ƒë·ªÉ d·ªÖ quan s√°t
        const blessingSection = await waitForElement('.blessing-section');
        const containerHeader = await waitForElement('.container > header');
        if (blessingSection && containerHeader) {
            containerHeader.parentNode.insertBefore(blessingSection, containerHeader.nextSibling);
            console.log('[HH3D T·ªëi ∆∞u] ƒê√£ di chuy·ªÉn khu v·ª±c ch√∫c ph√∫c.');
        }

        // 1. Ki·ªÉm tra xem ƒë√£ nh·∫≠n th∆∞·ªüng ch∆∞a (tr·∫°ng th√°i cu·ªëi c√πng)
        const blessingMessageDiv = document.querySelector('.blessing-message p');
        if (blessingMessageDiv && blessingMessageDiv.textContent.includes(REWARD_RECEIVED_MESSAGE)) {
            console.log(`%c[HH3D T·ªëi ∆∞u] Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh tr∆∞·ªõc ƒë√≥. Script k·∫øt th√∫c.`, 'color: green; font-weight: bold;');
            isScriptRunning = false;
            return;
        }

        // 2. Ki·ªÉm tra xem ƒë√£ ch√∫c ph√∫c ch∆∞a
        let isAlreadyBlessed = document.body.textContent.includes(ALREADY_BLESSED_MESSAGE);
        if (!isAlreadyBlessed) {
            console.log('[HH3D T·ªëi ∆∞u] Ch∆∞a ch√∫c ph√∫c. B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch√∫c ph√∫c.');
            for (let i = 0; i < BLESSING_MAX_RETRIES; i++) {
                if (await performBlessing()) {
                    isAlreadyBlessed = true;
                    break;
                }
                console.log(`[HH3D T·ªëi ∆∞u] Ch√∫c ph√∫c th·∫•t b·∫°i, th·ª≠ l·∫°i l·∫ßn ${i + 1}/${BLESSING_MAX_RETRIES}...`);
                await sleep(RETRY_INTERVAL_MS);
            }
        } else {
            console.log('[HH3D T·ªëi ∆∞u] ƒê√£ ch√∫c ph√∫c t·ª´ tr∆∞·ªõc. Chuy·ªÉn sang t√¨m l√¨ x√¨.');
        }

        // 3. N·∫øu ƒë√£ ch√∫c ph√∫c, ti·∫øn h√†nh t√¨m l√¨ x√¨
        if (isAlreadyBlessed) {
            await tryOpenLixi();
        } else {
            console.log('%c[HH3D T·ªëi ∆∞u] Ch√∫c ph√∫c kh√¥ng th√†nh c√¥ng sau nhi·ªÅu l·∫ßn th·ª≠. D·ª´ng script.', 'color: orange; font-weight: bold;');
        }

        console.log('%c[HH3D T·ªëi ∆∞u] SCRIPT ƒê√É HO√ÄN TH√ÄNH LU·ªíNG CH√çNH.', 'color: #1a73e8; font-weight: bold;');
        isScriptRunning = false;
    }

    // Kh·ªüi ch·∫°y script khi trang ƒë√£ t·∫£i xong ph·∫ßn n·ªôi dung ch√≠nh
    window.addEventListener('DOMContentLoaded', runAutomation);
})();
